

######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 1                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.161s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:30:00 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.5192 s[0m
[info][project setup] computing overriding information took 1.3610 s[0m
[info][project setup] computing defined methods took 1.6512 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2237 s[0m
[info][project setup] creating the project took 3.4566 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 9.0020 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000a37d5400@342e690b[0m
[info][project] initialization of PropertyStore took 0.0058 s[0m
[info][analysis progress] setting up property store took 0.0086 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.7437 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0483 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@2f99d8c is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.8463 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldReadAccessInformation,opalj.CallersProperty,opalj.AllocationSitePointsToSet,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.LoadedClasses,opalj.MethodFieldWriteAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of ClosedPackages took 0.0009 s[0m
[info][project] initialization of ClassExtensibility took 0.0008 s[0m
[info][project] initialization of TypeExtensibility took 0.0412 s[0m
[info][project] initialization of IsOverridableMethod took 0.0007 s[0m
[info][project] initialization of InitialEntryPoints took 0.1175 s[0m
[info][project] initialization of DeclaredFields took 0.1000 s[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3335 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1343 s[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -155771736 bits
[info][analysis progress] analysis phase 0 took 268.7586 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -4445557888 bits
[info][analysis progress] analysis phase 1 took 2.6647 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   281.3159 s seconds total time
   9.0020 s seconds project time
   0.0086 s seconds property store time
   272.3140 s seconds analysis time


 time results:

 1 Threads :: took 272.3140 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   281.3159 s seconds total time
   9.0020 s seconds project time
   0.0086 s seconds property store time
   272.3140 s seconds analysis time

evaluation time: 281.4229 s
Fri Oct 10 03:34:42 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 1                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.100s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:34:44 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.6731 s[0m
[info][project setup] computing overriding information took 1.0120 s[0m
[info][project setup] computing defined methods took 1.2690 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2085 s[0m
[info][project setup] creating the project took 2.2036 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.8160 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x0000714e0f58c090@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0062 s[0m
[info][analysis progress] setting up property store took 0.0088 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.6959 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0324 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7735 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2946 s[0m
[info][project] initialization of DeclaredFields took 0.0631 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0296 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0957 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1807 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -197361896 bits
[info][analysis progress] analysis phase 0 took 260.9370 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -5036529888 bits
[info][analysis progress] analysis phase 1 took 2.8069 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   272.3756 s seconds total time
   7.8160 s seconds project time
   0.0088 s seconds property store time
   264.5596 s seconds analysis time


 time results:

 1 Threads :: took 264.5596 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   272.3756 s seconds total time
   7.8160 s seconds project time
   0.0088 s seconds property store time
   264.5596 s seconds analysis time

evaluation time: 272.4907 s
Fri Oct 10 03:39:17 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 1                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.164s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:39:20 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.5586 s[0m
[info][project setup] computing overriding information took 1.0588 s[0m
[info][project setup] computing defined methods took 1.3508 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2421 s[0m
[info][project setup] creating the project took 2.2068 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.4368 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000af7be200@342e690b[0m
[info][project] initialization of PropertyStore took 0.0068 s[0m
[info][analysis progress] setting up property store took 0.0097 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.6000 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.1088 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@65d7eea4 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7744 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.Callees,opalj.MethodFieldReadAccessInformation,opalj.ForNameClasses,opalj.FieldReadAccessInformation,opalj.MethodFieldWriteAccessInformation,opalj.CallersProperty] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0004 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4021 s[0m
[info][project] initialization of DeclaredFields took 0.1006 s[0m
[info][project] initialization of ClosedPackages took 0.0009 s[0m
[info][project] initialization of ClassExtensibility took 0.0007 s[0m
[info][project] initialization of TypeExtensibility took 0.0466 s[0m
[info][project] initialization of IsOverridableMethod took 0.0008 s[0m
[info][project] initialization of InitialEntryPoints took 0.1066 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.3744 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 360 bits
[info][analysis progress] analysis phase 0 took 260.7629 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 48 bits
[info][analysis progress] analysis phase 1 took 4.3966 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   273.4091 s seconds total time
   7.4368 s seconds project time
   0.0097 s seconds property store time
   265.9723 s seconds analysis time


 time results:

 1 Threads :: took 265.9723 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   273.4091 s seconds total time
   7.4368 s seconds project time
   0.0097 s seconds property store time
   265.9723 s seconds analysis time

evaluation time: 273.6163 s
Fri Oct 10 03:43:53 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 1                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.107s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:43:56 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.0454 s[0m
[info][project setup] computing overriding information took 1.0510 s[0m
[info][project setup] computing defined methods took 1.3279 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2096 s[0m
[info][project setup] creating the project took 2.6374 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.4092 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x0000749d43578f30@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0058 s[0m
[info][analysis progress] setting up property store took 0.0083 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5842 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0327 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6609 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2890 s[0m
[info][project] initialization of DeclaredFields took 0.0653 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0006 s[0m
[info][project] initialization of TypeExtensibility took 0.0304 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0911 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.3654 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 336 bits
[info][analysis progress] analysis phase 0 took 262.5641 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 64 bits
[info][analysis progress] analysis phase 1 took 4.2321 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   275.9042 s seconds total time
   8.4092 s seconds project time
   0.0083 s seconds property store time
   267.4950 s seconds analysis time


 time results:

 1 Threads :: took 267.4950 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   275.9042 s seconds total time
   8.4092 s seconds project time
   0.0083 s seconds property store time
   267.4950 s seconds analysis time

evaluation time: 276.1074 s
Fri Oct 10 03:48:32 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 2                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.166s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:48:35 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.9736 s[0m
[info][project setup] computing overriding information took 1.0042 s[0m
[info][project setup] computing defined methods took 1.2596 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2214 s[0m
[info][project setup] creating the project took 2.5127 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.7058 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000477c5e00@3596b249[0m
[info][project] initialization of PropertyStore took 0.0070 s[0m
[info][analysis progress] setting up property store took 0.0101 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0005 s[0m
[info][project] initialization of DeclaredMethods took 0.7643 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0357 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@6076c66 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.8541 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldReadAccessInformation,opalj.MethodFieldReadAccessInformation,opalj.ForNameClasses,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty,opalj.AllocationSitePointsToSet,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0005 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4337 s[0m
[info][project] initialization of DeclaredFields took 0.0951 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0006 s[0m
[info][project] initialization of TypeExtensibility took 0.0317 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0944 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1912 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -150670328 bits
[info][analysis progress] analysis phase 0 took 255.5309 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -4453402144 bits
[info][analysis progress] analysis phase 1 took 2.8813 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   267.0212 s seconds total time
   7.7058 s seconds project time
   0.0101 s seconds property store time
   259.3154 s seconds analysis time


 time results:

 1 Threads :: took 259.3154 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   267.0212 s seconds total time
   7.7058 s seconds project time
   0.0101 s seconds property store time
   259.3154 s seconds analysis time

evaluation time: 267.1357 s
Fri Oct 10 03:53:02 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 2                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.102s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:53:04 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.6916 s[0m
[info][project setup] computing overriding information took 1.0140 s[0m
[info][project setup] computing defined methods took 1.2871 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2722 s[0m
[info][project setup] creating the project took 3.3059 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.7808 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x0000715beb57ea30@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0061 s[0m
[info][analysis progress] setting up property store took 0.0088 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5964 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0300 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6719 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3801 s[0m
[info][project] initialization of DeclaredFields took 0.0636 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0301 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0936 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1903 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -200878744 bits
[info][analysis progress] analysis phase 0 took 260.1538 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -5031063416 bits
[info][analysis progress] analysis phase 1 took 2.5769 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   272.2265 s seconds total time
   8.7808 s seconds project time
   0.0088 s seconds property store time
   263.4457 s seconds analysis time


 time results:

 1 Threads :: took 263.4457 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   272.2265 s seconds total time
   8.7808 s seconds project time
   0.0088 s seconds property store time
   263.4457 s seconds analysis time

evaluation time: 272.3402 s
Fri Oct 10 03:57:37 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 2                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.163s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 03:57:40 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.5190 s[0m
[info][project setup] computing overriding information took 1.1245 s[0m
[info][project setup] computing defined methods took 1.4205 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2076 s[0m
[info][project setup] creating the project took 2.2043 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.6531 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000ba7bd400@3596b249[0m
[info][project] initialization of PropertyStore took 0.0064 s[0m
[info][analysis progress] setting up property store took 0.0093 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5573 s[0m
[info][project] initialization of SimpleContexts took 0.0013 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0002 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.1370 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@6076c66 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7464 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldReadAccessInformation,opalj.MethodFieldReadAccessInformation,opalj.ForNameClasses,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty,opalj.AllocationSitePointsToSet,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0004 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2943 s[0m
[info][project] initialization of DeclaredFields took 0.0718 s[0m
[info][project] initialization of ClosedPackages took 0.0009 s[0m
[info][project] initialization of ClassExtensibility took 0.0007 s[0m
[info][project] initialization of TypeExtensibility took 0.0346 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.1016 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1385 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 312 bits
[info][analysis progress] analysis phase 0 took 261.5926 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 24 bits
[info][analysis progress] analysis phase 1 took 4.4625 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   274.4961 s seconds total time
   7.6531 s seconds project time
   0.0093 s seconds property store time
   266.8430 s seconds analysis time


 time results:

 1 Threads :: took 266.8430 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   274.4961 s seconds total time
   7.6531 s seconds project time
   0.0093 s seconds property store time
   266.8430 s seconds analysis time

evaluation time: 274.6944 s
Fri Oct 10 04:02:14 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 2                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.103s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:02:17 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.5482 s[0m
[info][project setup] computing overriding information took 1.1187 s[0m
[info][project setup] computing defined methods took 1.3618 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2363 s[0m
[info][project setup] creating the project took 3.1979 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.8195 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00007a5edb586fd0@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0060 s[0m
[info][analysis progress] setting up property store took 0.0086 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.6210 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0297 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6937 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2950 s[0m
[info][project] initialization of DeclaredFields took 0.0676 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0321 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0977 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1949 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 336 bits
[info][analysis progress] analysis phase 0 took 267.3472 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 32 bits
[info][analysis progress] analysis phase 1 took 4.2037 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   281.1016 s seconds total time
   8.8195 s seconds project time
   0.0086 s seconds property store time
   272.2821 s seconds analysis time


 time results:

 1 Threads :: took 272.2821 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   281.1016 s seconds total time
   8.8195 s seconds project time
   0.0086 s seconds property store time
   272.2821 s seconds analysis time

evaluation time: 281.3037 s
Fri Oct 10 04:06:58 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 3                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.154s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:07:01 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.2181 s[0m
[info][project setup] computing overriding information took 1.2514 s[0m
[info][project setup] computing defined methods took 1.5372 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2632 s[0m
[info][project setup] creating the project took 3.0773 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.3962 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000157ca400@3596b249[0m
[info][project] initialization of PropertyStore took 0.0070 s[0m
[info][analysis progress] setting up property store took 0.0105 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0772 s[0m
[info][project] initialization of DeclaredMethods took 0.6634 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@485c84d7 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7984 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.Callees,opalj.AllocationSitePointsToSet,opalj.MethodFieldReadAccessInformation,opalj.FieldWriteAccessInformation,opalj.ForNameClasses,opalj.FieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.LoadedClasses] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3610 s[0m
[info][project] initialization of DeclaredFields took 0.0672 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0356 s[0m
[info][project] initialization of IsOverridableMethod took 0.0008 s[0m
[info][project] initialization of InitialEntryPoints took 0.0984 s[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1822 s[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -152589856 bits
[info][analysis progress] analysis phase 0 took 259.8153 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -4447479512 bits
[info][analysis progress] analysis phase 1 took 2.9117 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   271.9665 s seconds total time
   8.3962 s seconds project time
   0.0105 s seconds property store time
   263.5703 s seconds analysis time


 time results:

 1 Threads :: took 263.5703 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   271.9665 s seconds total time
   8.3962 s seconds project time
   0.0105 s seconds property store time
   263.5703 s seconds analysis time

evaluation time: 272.0806 s
Fri Oct 10 04:11:33 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 3                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.103s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:11:36 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.2103 s[0m
[info][project setup] computing overriding information took 1.0180 s[0m
[info][project setup] computing defined methods took 1.2857 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2215 s[0m
[info][project setup] creating the project took 2.7711 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.3869 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000077fc43590258@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0054 s[0m
[info][analysis progress] setting up property store took 0.0086 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.5741 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0298 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7266 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2668 s[0m
[info][project] initialization of DeclaredFields took 0.0652 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0313 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0888 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1452 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -199191952 bits
[info][analysis progress] analysis phase 0 took 264.7385 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -5031008120 bits
[info][analysis progress] analysis phase 1 took 2.6842 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   276.5767 s seconds total time
   8.3869 s seconds project time
   0.0086 s seconds property store time
   268.1897 s seconds analysis time


 time results:

 1 Threads :: took 268.1897 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   276.5767 s seconds total time
   8.3869 s seconds project time
   0.0086 s seconds property store time
   268.1897 s seconds analysis time

evaluation time: 276.6893 s
Fri Oct 10 04:16:12 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 3                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.166s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:16:15 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.5965 s[0m
[info][project setup] computing overriding information took 1.0500 s[0m
[info][project setup] computing defined methods took 1.3153 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2119 s[0m
[info][project setup] creating the project took 2.1793 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.8677 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000717cc400@3596b249[0m
[info][project] initialization of PropertyStore took 0.0060 s[0m
[info][analysis progress] setting up property store took 0.0090 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.7652 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0387 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@6076c66 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.8580 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldReadAccessInformation,opalj.MethodFieldReadAccessInformation,opalj.ForNameClasses,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty,opalj.AllocationSitePointsToSet,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0004 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4135 s[0m
[info][project] initialization of DeclaredFields took 0.0954 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0007 s[0m
[info][project] initialization of TypeExtensibility took 0.0340 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0999 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1875 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 312 bits
[info][analysis progress] analysis phase 0 took 258.4552 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 48 bits
[info][analysis progress] analysis phase 1 took 3.9554 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   271.1853 s seconds total time
   7.8677 s seconds project time
   0.0090 s seconds property store time
   263.3176 s seconds analysis time


 time results:

 1 Threads :: took 263.3176 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   271.1853 s seconds total time
   7.8677 s seconds project time
   0.0090 s seconds property store time
   263.3176 s seconds analysis time

evaluation time: 271.3833 s
Fri Oct 10 04:20:47 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 3                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.101s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:20:49 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.4155 s[0m
[info][project setup] computing overriding information took 1.0328 s[0m
[info][project setup] computing defined methods took 1.2781 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2005 s[0m
[info][project setup] creating the project took 2.9481 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.5544 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000075426358e650@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0055 s[0m
[info][analysis progress] setting up property store took 0.0077 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.5455 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0296 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6195 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3003 s[0m
[info][project] initialization of DeclaredFields took 0.0651 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0301 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0949 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1480 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 336 bits
[info][analysis progress] analysis phase 0 took 272.6786 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 64 bits
[info][analysis progress] analysis phase 1 took 4.2554 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   286.1456 s seconds total time
   8.5544 s seconds project time
   0.0077 s seconds property store time
   277.5912 s seconds analysis time


 time results:

 1 Threads :: took 277.5912 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   286.1456 s seconds total time
   8.5544 s seconds project time
   0.0077 s seconds property store time
   277.5912 s seconds analysis time

evaluation time: 286.3440 s
Fri Oct 10 04:25:36 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 4                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.165s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:25:38 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.2635 s[0m
[info][project setup] computing overriding information took 1.1853 s[0m
[info][project setup] computing defined methods took 1.4285 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2644 s[0m
[info][project setup] creating the project took 3.0156 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.2606 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000097d4e00@7237f3c1[0m
[info][project] initialization of PropertyStore took 0.0073 s[0m
[info][analysis progress] setting up property store took 0.0108 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.7492 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0452 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@1224e1b6 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.8478 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.MethodFieldReadAccessInformation,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation,opalj.ForNameClasses,opalj.AllocationSitePointsToSet,opalj.FieldReadAccessInformation,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3073 s[0m
[info][project] initialization of DeclaredFields took 0.0642 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0312 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0903 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1990 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -154312016 bits
[info][analysis progress] analysis phase 0 took 265.4834 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -4454850936 bits
[info][analysis progress] analysis phase 1 took 2.8231 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   277.4634 s seconds total time
   8.2606 s seconds project time
   0.0108 s seconds property store time
   269.2028 s seconds analysis time


 time results:

 1 Threads :: took 269.2028 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   277.4634 s seconds total time
   8.2606 s seconds project time
   0.0108 s seconds property store time
   269.2028 s seconds analysis time

evaluation time: 277.5809 s
Fri Oct 10 04:30:16 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 4                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.104s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:30:19 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.5689 s[0m
[info][project setup] computing overriding information took 1.0645 s[0m
[info][project setup] computing defined methods took 1.3394 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2056 s[0m
[info][project setup] creating the project took 3.1694 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.8585 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000076a68f596a30@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0057 s[0m
[info][analysis progress] setting up property store took 0.0082 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0003 s[0m
[info][project] initialization of DeclaredMethods took 0.6462 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0303 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7242 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2974 s[0m
[info][project] initialization of DeclaredFields took 0.0667 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0006 s[0m
[info][project] initialization of TypeExtensibility took 0.0312 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0930 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.2062 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -201122008 bits
[info][analysis progress] analysis phase 0 took 265.7422 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -5041808728 bits
[info][analysis progress] analysis phase 1 took 2.8621 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   278.2277 s seconds total time
   8.8585 s seconds project time
   0.0082 s seconds property store time
   269.3692 s seconds analysis time


 time results:

 1 Threads :: took 269.3692 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   278.2277 s seconds total time
   8.8585 s seconds project time
   0.0082 s seconds property store time
   269.3692 s seconds analysis time

evaluation time: 278.3450 s
Fri Oct 10 04:34:57 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 4                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.165s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:35:00 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.8136 s[0m
[info][project setup] computing overriding information took 1.0928 s[0m
[info][project setup] computing defined methods took 1.3150 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2077 s[0m
[info][project setup] creating the project took 2.3898 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.2081 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000000006a7cee00@7237f3c1[0m
[info][project] initialization of PropertyStore took 0.0057 s[0m
[info][analysis progress] setting up property store took 0.0085 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0005 s[0m
[info][project] initialization of DeclaredMethods took 0.6508 s[0m
[info][project] initialization of SimpleContexts took 0.0012 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0002 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0420 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@1224e1b6 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7615 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.MethodFieldReadAccessInformation,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation,opalj.ForNameClasses,opalj.AllocationSitePointsToSet,opalj.FieldReadAccessInformation,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0004 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4171 s[0m
[info][project] initialization of DeclaredFields took 0.0649 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0290 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0967 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1936 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 312 bits
[info][analysis progress] analysis phase 0 took 258.7070 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 24 bits
[info][analysis progress] analysis phase 1 took 4.5271 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   272.2489 s seconds total time
   8.2081 s seconds project time
   0.0085 s seconds property store time
   264.0408 s seconds analysis time


 time results:

 1 Threads :: took 264.0408 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   272.2489 s seconds total time
   8.2081 s seconds project time
   0.0085 s seconds property store time
   264.0408 s seconds analysis time

evaluation time: 272.4495 s
Fri Oct 10 04:39:32 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 4                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.100s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:39:35 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.7738 s[0m
[info][project setup] computing overriding information took 1.1175 s[0m
[info][project setup] computing defined methods took 1.3328 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2053 s[0m
[info][project setup] creating the project took 2.3634 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.1159 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000073051b590800@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0058 s[0m
[info][analysis progress] setting up property store took 0.0081 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0005 s[0m
[info][project] initialization of DeclaredMethods took 0.6496 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0284 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7234 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2971 s[0m
[info][project] initialization of DeclaredFields took 0.2065 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0317 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0884 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1937 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 336 bits
[info][analysis progress] analysis phase 0 took 265.7630 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 0 bits
[info][analysis progress] analysis phase 1 took 4.2456 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   278.8883 s seconds total time
   8.1159 s seconds project time
   0.0081 s seconds property store time
   270.7723 s seconds analysis time


 time results:

 1 Threads :: took 270.7723 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   278.8883 s seconds total time
   8.1159 s seconds project time
   0.0081 s seconds property store time
   270.7723 s seconds analysis time

evaluation time: 279.1041 s
Fri Oct 10 04:44:14 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 5                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.160s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:44:17 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.7450 s[0m
[info][project setup] computing overriding information took 1.0508 s[0m
[info][project setup] computing defined methods took 1.3135 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2422 s[0m
[info][project setup] creating the project took 2.3554 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 7.9056 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x00000000337d0400@7237f3c1[0m
[info][project] initialization of PropertyStore took 0.0061 s[0m
[info][analysis progress] setting up property store took 0.0089 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0005 s[0m
[info][project] initialization of DeclaredMethods took 0.7714 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0476 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@1224e1b6 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.8761 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.MethodFieldReadAccessInformation,opalj.FieldWriteAccessInformation,opalj.MethodFieldWriteAccessInformation,opalj.ForNameClasses,opalj.AllocationSitePointsToSet,opalj.FieldReadAccessInformation,opalj.LoadedClasses,opalj.Callees,opalj.CallersProperty] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4188 s[0m
[info][project] initialization of DeclaredFields took 0.0899 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0308 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0913 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1891 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -155984704 bits
[info][analysis progress] analysis phase 0 took 260.2319 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -4456951888 bits
[info][analysis progress] analysis phase 1 took 2.6797 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   271.7385 s seconds total time
   7.9056 s seconds project time
   0.0089 s seconds property store time
   263.8330 s seconds analysis time


 time results:

 1 Threads :: took 263.8330 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   271.7385 s seconds total time
   7.9056 s seconds project time
   0.0089 s seconds property store time
   263.8330 s seconds analysis time

evaluation time: 271.8507 s
Fri Oct 10 04:48:49 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 5                               #####
##### Cleanup true                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.103s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:48:51 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.2938 s[0m
[info][project setup] computing overriding information took 1.0393 s[0m
[info][project setup] computing defined methods took 1.3000 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2163 s[0m
[info][project setup] creating the project took 2.8632 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.8012 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000071db4f594090@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0054 s[0m
[info][analysis progress] setting up property store took 0.0079 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5956 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0332 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6806 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation)[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.4460 s[0m
[info][project] initialization of DeclaredFields took 0.0945 s[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0005 s[0m
[info][project] initialization of TypeExtensibility took 0.0336 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.1025 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1788 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared -201082776 bits
[info][analysis progress] analysis phase 0 took 260.7697 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
[info][cleanup] to be deleted after this phase: HashSet(opalj.FieldAssignability, opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation, opalj.EscapeProperty, opalj.FieldWriteAccessInformation)[0m
cleared -5030892328 bits
[info][analysis progress] analysis phase 1 took 2.9996 s[0m


 
 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   273.2948 s seconds total time
   8.8012 s seconds project time
   0.0079 s seconds property store time
   264.4935 s seconds analysis time


 time results:

 1 Threads :: took 264.4935 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 0
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 0
 Non Assignable Fields: 0
 Fields: 6142

 Mutable Fields: 0
 Non Transitively Immutable Fields: 0
 Dependently Immutable Fields: 0
 Transitively Immutable Fields: 0
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 0
 Non Transitively Immutable Classes: 0
 Dependently Immutable Classes: 0
 Transitively Immutable Classes: 0
 Classes: 4353

 Transitively Immutable Interfaces: 0


 Mutable Types: 0
 Non Transitively Immutable Types: 0
 Dependently Immutable Types: 0
 Transitively immutable Types: 0
 Types: 4353

 running All analysis
 took:
   273.2948 s seconds total time
   8.8012 s seconds project time
   0.0079 s seconds property store time
   264.4935 s seconds analysis time

evaluation time: 273.4092 s
Fri Oct 10 04:53:25 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 5                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
##### Compact                                         #####
########################################################
########################################################


[0.160s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:53:27 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 0.9131 s[0m
[info][project setup] computing overriding information took 1.0648 s[0m
[info][project setup] computing defined methods took 1.3612 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2170 s[0m
[info][project setup] creating the project took 2.5548 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.2509 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000000004f7c8800@342e690b[0m
[info][project] initialization of PropertyStore took 0.0073 s[0m
[info][analysis progress] setting up property store took 0.0105 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5580 s[0m
[info][project] initialization of SimpleContexts took 0.0010 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0002 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.1185 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@2f99d8c is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.7281 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.FieldReadAccessInformation,opalj.CallersProperty,opalj.AllocationSitePointsToSet,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.LoadedClasses,opalj.MethodFieldWriteAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of ClosedPackages took 0.0008 s[0m
[info][project] initialization of ClassExtensibility took 0.0008 s[0m
[info][project] initialization of TypeExtensibility took 0.0345 s[0m
[info][project] initialization of IsOverridableMethod took 0.0007 s[0m
[info][project] initialization of InitialEntryPoints took 0.1042 s[0m
[info][project] initialization of DeclaredFields took 0.0710 s[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.2973 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1311 s[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 312 bits
[info][analysis progress] analysis phase 0 took 268.8596 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 48 bits
[info][analysis progress] analysis phase 1 took 4.2370 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   282.1171 s seconds total time
   8.2509 s seconds project time
   0.0105 s seconds property store time
   273.8662 s seconds analysis time


 time results:

 1 Threads :: took 273.8662 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   282.1171 s seconds total time
   8.2509 s seconds project time
   0.0105 s seconds property store time
   273.8662 s seconds analysis time

evaluation time: 282.3190 s
Fri Oct 10 04:58:10 UTC 2025


######################################################
######################################################
##### RUNNING Immutability AGAINST: opal with 16 Gb RAM #####
##### Iteration 5                               #####
##### Cleanup false                                 #####
##### Escape All                                  #####
#####                                          #####
########################################################
########################################################


[0.102s][warning][jfr,start] The .jfc option/setting 'memorysize' doesn't exist.
[34m[warn][OPAL] the property org.opalj.threads.CPUBoundTasks is unspecified[0m
[info][OPAL] using 8 thread(s) for CPU bound tasks (can be changed by setting the system property org.opalj.threads.CPUBoundTasks; the number should be equal to the number of physical â€“ not hyperthreaded â€“ cores)[0m
[34m[warn][OPAL] the property org.opalj.threads.IOBoundTasks is unspecified[0m
[info][OPAL] using at most 16 thread(s) for IO bound tasks (can be changed by setting the system property org.opalj.threads.IOBoundTasks; the number should be betweeen 1 and 2 times the number of (hyperthreaded) cores)[0m
[info][project configuration] the classPath is target/scala-2.13/[0m
[info][OPAL Setup] registered lazy analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: InterProceduralEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: StaticInitializerAnalysis (Resolves invocations of static initializers.)[0m
[info][OPAL Setup] registered triggered analysis: ConfiguredNativeMethodsCallGraphAnalysis (Resolves calls from native methods as specified in the configuration.)[0m
[info][OPAL Setup] registered lazy analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered eager analysis: ReturnValueFreshnessAnalysis (Determines if a method's return value is always freshly allocated.)[0m
[info][OPAL Setup] registered triggered analysis: SystemPropertiesAnalysis (Computes strings available from all instances of the Properties class.)[0m
[info][OPAL Setup] registered lazy analysis: StringAnalysis (Computes strings available on individual variables in the context of the method they are defined in.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedCallsAnalysis (Resolves invocations due to reflection.)[0m
[info][OPAL Setup] registered eager analysis: DoPrivilegedAnalysis (Resolves invocations of methods invoked via AccessController.doPrivileged.)[0m
[info][OPAL Setup] registered lazy analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered eager analysis: L0TACAIAnalysis (Performs an abstract interpretation using the configured domain and then computes the 3-address code.)[0m
[info][OPAL Setup] registered lazy analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered eager analysis: FieldLocalityAnalysis (Determines if a field's lifetime is bound to its owning instance.)[0m
[info][OPAL Setup] registered lazy analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L0FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: SerializationRelatedCallsAnalysis (Resolves invocations due to (de-)serialization.)[0m
[info][OPAL Setup] registered lazy analysis: L2StringFlowAnalysis (Computes string flow functions on level L2 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionRelatedFieldAccessesAnalysis (Determines the reflective indirect read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered eager analysis: StaticDataUsageAnalysis (Determines if a method uses only compile time constant static state.)[0m
[info][OPAL Setup] registered lazy analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L2FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: ThreadRelatedCallsAnalysis (Resolves invocations of Thread.run resulting from Thread.start.)[0m
[info][OPAL Setup] registered lazy analysis: L0StringFlowAnalysis (Computes string flow functions on level L0 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L0PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1StringFlowAnalysis (Computes string flow functions on level L1 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered eager analysis: L0AllocationFreenessAanalysis (Determines if a method may (transitively) cause allocations.)[0m
[info][OPAL Setup] registered lazy analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: L1FieldAssignabilityAnalysis (Determines the assignability of (instance and static) fields.)[0m
[info][OPAL Setup] registered lazy analysis: MethodStringFlowAnalysis (Computes results of data flow analysis for string variables in the context of a method.)[0m
[info][OPAL Setup] registered eager analysis: FieldAccessInformationAnalysis (Determines the direct read and write accesses to fields.)[0m
[info][OPAL Setup] registered lazy analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered eager analysis: TypeImmutabilityAnalysis (Determines the immutability of types (i.e., sets of classes).)[0m
[info][OPAL Setup] registered lazy analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered eager analysis: ClassImmutabilityAnalysis (Determines the immutability of individual classes.)[0m
[info][OPAL Setup] registered triggered analysis: FinalizerAnalysis (Resolves invocations of class finalizers.)[0m
[info][OPAL Setup] registered eager analysis: L0SelfReferenceLeakageAnalysis (Determines if an object may leak its self reference (`this`).)[0m
[info][OPAL Setup] registered eager analysis: SimpleFieldAccessInformationAnalysis (Determines the direct read and write accesses to fields without receiver or param information.)[0m
[info][OPAL Setup] registered lazy analysis: L3StringFlowAnalysis (Computes string flow functions on level L3 for individual statements in the context of a method to be used in data flow analysis.)[0m
[info][OPAL Setup] registered lazy analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered eager analysis: L0CompileTimeConstancyAnalysis (Determines if static fields are compile time constants.)[0m
[info][OPAL Setup] registered lazy analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L1PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: ReflectionAllocationsAnalysis (Produces points-to sets for the results of reflection methods like Class.getMethod.)[0m
[info][OPAL Setup] registered lazy analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered eager analysis: L2PurityAnalysis (Determines a method's purity.)[0m
[info][OPAL Setup] registered lazy analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered eager analysis: L1ThrownExceptionsAnalysis (Determines the exceptions that are thrown by a method.)[0m
[info][OPAL Setup] registered lazy analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered eager analysis: FieldImmutabilityAnalysis (Determines the immutability of (instance and static) fields.)[0m
[info][OPAL Setup] registered triggered analysis: LoadedClassesAnalysis (Computes the set of classes loaded, e.g., due to instantiation or static member access)[0m
[info][OPAL Setup] registered lazy analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
[info][OPAL Setup] registered eager analysis: SimpleEscapeAnalysis (Determines whether objects escape a method.)[0m
Fri Oct 10 04:58:12 UTC 2025
[info][OPAL Common] Production Build[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceFallbacks: fallbacks are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.TraceSuppressedNotifications: suppressed notifications are not reported[0m
[info][OPAL - new PropertyStores] org.opalj.fpcf.PropertyStore.Debug: debugging support off[0m
[info][creating project] reading project class files[0m
[info][class file reader] information about class files synthesized at parsing time is removed[0m
[info][class file reader] the control-flow is simplified[0m
[info][class file reader] control flow simplifications are not logged[0m
[info][class file reader] invokedynamics are rewritten[0m
[info][class file reader] rewrites of LambdaMetaFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] rewrites of StringConcatFactory based invokedynamics are not logged[0m
[info][class file reader] unknown invokedynamics are logged[0m
[info][class file reader] dynamic constants are rewritten[0m
[info][class file reader] rewrites of dynamic constants are not logged[0m
[info][class file reader] unknown dynamic constants are logged[0m
[info][class file reader] unresolved dynamic constants are logged[0m
[info][project configuration] the classpath is target/scala-2.13[0m
[info][creating project] reading project class files[0m
[info][creating project] 	file: target/scala-2.13[0m
[info][OPAL Bytecode Representation] Production Build[0m
[info][project configuration] ignored duplicate type declarations for: {java.lang.reflect.UndeclaredThrowableException, java.lang.reflect.AnnotatedElement, java.lang.reflect.InvocationTargetException, java.lang.reflect.Type, java.lang.reflect.MalformedParameterizedTypeException, java.lang.reflect.GenericSignatureFormatError, java.io.Serializable, java.lang.reflect.GenericDeclaration}[0m
[info][OPAL] org.opalj.br.cfg.CFG.Validate: validation off[0m
[info][OPAL] org.opalj.br.cfg.CFG.DF.Solver.Trace: false[0m
[info][creating project] reading JDK class files[0m
[info][creating project] 	file: /usr/lib/jvm/jdk-24.0.2-oracle-x64/jmods[0m
[info][OPAL Bytecode Infrastructure] Production Build[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.tools.jlink.internal.plugins.StringSharingPlugin$CompactCPHelper$DescriptorsScanner - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] sun.security.util.MemoryCache - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))), target=int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int))[0m
[info][load-time transformation] sun.nio.ch.FileChannelImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))), target=int typeSwitch(java.nio.channels.WritableByteChannel,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass$FieldCounter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.riscv64.linux.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.x64.sysv.TypeClass - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/PaddingLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/ValueLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfBoolean)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfByte)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfShort)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfChar)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfInt)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfLong)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfFloat)), ConstantClass(ClassType(java/lang/foreign/ValueLayout$OfDouble)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)), ConstantClass(ClassType(java/lang/foreign/GroupLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.fallback.FallbackLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/GroupLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.foreign.Utils$BaseAndScale - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ArrayType(ByteType)), ConstantClass(ArrayType(CharType)), ConstantClass(ArrayType(ShortType)), ConstantClass(ArrayType(IntegerType)), ConstantClass(ArrayType(FloatType)), ConstantClass(ArrayType(LongType)), ConstantClass(ArrayType(DoubleType)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.CallingSequenceBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.BindingSpecializer - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$VMLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferStore)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BufferLoad)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Copy)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Allocate)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$BoxAddress)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentBase)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$SegmentOffset)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Dup)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftLeft)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$ShiftRight)), ConstantClass(ClassType(jdk/internal/foreign/abi/Binding$Cast)))), target=int typeSwitch(jdk.internal.foreign.abi.Binding,int))[0m
[info][load-time transformation] jdk.internal.foreign.abi.AbstractLinker - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/foreign/StructLayout)), ConstantClass(ClassType(java/lang/foreign/UnionLayout)), ConstantClass(ClassType(java/lang/foreign/SequenceLayout)), ConstantClass(ClassType(java/lang/foreign/AddressLayout)))), target=int typeSwitch(java.lang.foreign.MemoryLayout,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.SignaturesImpl$ClassTypeSigImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.NonterminalCodeBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/NonterminalCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ConstantDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InvokeDynamicEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeLocalsShifterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CompoundElement)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)))), target=int typeSwitch(java.lang.classfile.ClassFileElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedFieldBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedFieldBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalFieldBuilder)))), target=int typeSwitch(java.lang.classfile.FieldBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeRelabelerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/CharacterRange)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/CustomAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedMethodBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedMethodBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalMethodBuilder)))), target=int typeSwitch(java.lang.classfile.MethodBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.verifier.ParserVerifier - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordComponentInfo)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ChainedClassBuilder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedClassBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/DirectClassBuilder)))), target=int typeSwitch(java.lang.classfile.ClassBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeStackTrackerImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/ArrayLoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ArrayStoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConvertInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/MonitorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NopInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/OperatorInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ReturnInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StackInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ThrowInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LabelTarget)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.BlockCodeBuilderImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/impl/BlockCodeBuilderImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ChainedCodeBuilder)), ConstantClass(ClassType(jdk/internal/classfile/impl/TerminalCodeBuilder)))), target=int typeSwitch(java.lang.classfile.CodeBuilder,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/Superclass)), ConstantClass(ClassType(java/lang/classfile/Interfaces)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.CodeImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.AnnotationReader - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/constant/ClassDesc)), ConstantClass(ClassType(java/lang/constant/DynamicConstantDesc)), ConstantClass(ClassType(java/lang/constant/DirectMethodHandleDesc)), ConstantClass(ClassType(java/lang/constant/MethodTypeDesc)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$ListNodeImpl)), ConstantClass(ClassType(jdk/internal/classfile/impl/ClassPrinterImpl$MapNodeImpl)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ExceptionCatch)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariable)), ConstantClass(ClassType(java/lang/classfile/instruction/LocalVariableType)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfString)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfDouble)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfFloat)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfLong)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfInt)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfShort)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfChar)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfByte)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfBoolean)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/CodeModel)))), target=int typeSwitch(java.lang.classfile.CompoundElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/CodeModel)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.MethodElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassRemapperImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)))), target=int typeSwitch(java.lang.classfile.FieldElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$JsrInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/DiscontinuedInstruction$RetInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] jdk.internal.classfile.impl.ClassPrinterImpl - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.NumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.CompactNumberFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] java.text.DecimalFormat - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/math/BigInteger)))), target=int typeSwitch(java.lang.Number,int))[0m
[info][load-time transformation] java.lang.classfile.components.snippets.PackageSnippets - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$MapNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$ListNode)), ConstantClass(ClassType(jdk/internal/classfile/components/ClassPrinter$LeafNode)))), target=int typeSwitch(jdk.internal.classfile.components.ClassPrinter$Node,int))[0m
[info][load-time transformation] java.lang.classfile.attribute.ConstantValueAttribute - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/String)))), target=int typeSwitch(java.lang.constant.ConstantDesc,int))[0m
[info][load-time transformation] java.lang.Module - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AccessFlags)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/Attribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][load-time transformation] java.io.Reader$2 - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/String)), ConstantClass(ClassType(java/lang/StringBuilder)), ConstantClass(ClassType(java/lang/StringBuffer)), ConstantClass(ClassType(java/nio/CharBuffer)))), target=int typeSwitch(java.lang.CharSequence,int))[0m
[info][load-time transformation] jdk.jfr.internal.jfc.JFC - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/io/FileNotFoundException)), ConstantClass(ClassType(java/nio/file/NoSuchFileException)), ConstantClass(ClassType(java/text/ParseException)), ConstantClass(ClassType(jdk/jfr/internal/jfc/model/JFCModelException)), ConstantClass(ClassType(java/nio/file/AccessDeniedException)))), target=int typeSwitch(java.lang.Exception,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Character)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(jdk/jfr/consumer/RecordedObject$UnsignedValue)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.jfr.consumer.RecordedObject - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)))), target=int typeSwitch(java.lang.Object,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.taglets.SnippetTaglet - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantString(properties))), target=int typeSwitch(java.lang.String,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] jdk.javadoc.internal.doclets.formats.html.Navigation - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(javax/lang/model/element/ModuleElement)), ConstantClass(ClassType(javax/lang/model/element/PackageElement)), ConstantClass(ClassType(javax/lang/model/element/TypeElement)))), target=int typeSwitch(javax.lang.model.element.Element,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.NativeMethodFinder - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)))), target=int typeSwitch(java.lang.classfile.CodeElement,int))[0m
[info][load-time transformation] com.sun.tools.jnativescan.JNativeScanTask - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$NativeMethodDecl)), ConstantClass(ClassType(com/sun/tools/jnativescan/RestrictedUse$RestrictedMethodRefs)))), target=int typeSwitch(com.sun.tools.jnativescan.RestrictedUse,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/ClassModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)))), target=int typeSwitch(java.lang.classfile.AttributedElement,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.jdeps.Dependencies$BasicDependencyFinder$Visitor - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$ClassTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$ArrayTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$BaseTypeSig)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeVarSig)))), target=int typeSwitch(java.lang.classfile.Signature,int))[0m
[info][load-time transformation] com.sun.tools.javap.StackMapWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] com.sun.tools.jdeprscan.scan.CPEntries - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/InterfaceMethodRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FieldRefEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/AnnotationConstantValueEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.ClassWriter$SignaturePrinter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Unbounded)), ConstantClass(ClassType(java/lang/classfile/Signature$TypeArg$Bounded)))), target=int typeSwitch(java.lang.classfile.Signature$TypeArg,int))[0m
[info][load-time transformation] com.sun.tools.javap.CodeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/instruction/BranchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$ArgumentConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/ConstantInstruction$LoadConstantInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/FieldInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeDynamicInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/InvokeInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LoadInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/StoreInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/IncrementInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/LookupSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewMultiArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewObjectInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewPrimitiveArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/NewReferenceArrayInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TableSwitchInstruction)), ConstantClass(ClassType(java/lang/classfile/instruction/TypeCheckInstruction)))), target=int typeSwitch(java.lang.classfile.Instruction,int))[0m
[info][load-time transformation] com.sun.tools.javap.ConstantWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/constantpool/ClassEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DoubleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MemberRefEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/FloatEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/IntegerEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/DynamicConstantPoolEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/LongEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/ModuleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/NameAndTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/PackageEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodHandleEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/MethodTypeEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/StringEntry)), ConstantClass(ClassType(java/lang/classfile/constantpool/Utf8Entry)))), target=int typeSwitch(java.lang.classfile.constantpool.PoolEntry,int))[0m
[info][load-time transformation] com.sun.tools.javap.TypeAnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$OffsetTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$LocalVarTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$CatchTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeParameterBoundTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$SupertypeTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$ThrowsTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$FormalParameterTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$TypeArgumentTarget)), ConstantClass(ClassType(java/lang/classfile/TypeAnnotation$EmptyTarget)))), target=int typeSwitch(java.lang.classfile.TypeAnnotation$TargetInfo,int))[0m
[info][load-time transformation] com.sun.tools.javap.AnnotationWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfConstant)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfEnum)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfClass)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfAnnotation)), ConstantClass(ClassType(java/lang/classfile/AnnotationValue$OfArray)))), target=int typeSwitch(java.lang.classfile.AnnotationValue,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/UnknownAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/AnnotationDefaultAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/BootstrapMethodsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CharacterRangeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CodeAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/CompilationIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ConstantValueAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/DeprecatedAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ExceptionsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LineNumberTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/LocalVariableTypeTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestHostAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/MethodParametersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleHashesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleMainClassAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModulePackagesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleResolutionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/ModuleTargetAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/NestMembersAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RecordAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleTypeAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeVisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/RuntimeInvisibleParameterAnnotationsAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/PermittedSubclassesAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SignatureAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceDebugExtensionAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceFileAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SourceIDAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapTableAttribute)), ConstantClass(ClassType(java/lang/classfile/attribute/SyntheticAttribute)))), target=int typeSwitch(java.lang.classfile.Attribute,int))[0m
[info][load-time transformation] com.sun.tools.javap.AttributeWriter - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$ObjectVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$UninitializedVerificationTypeInfo)), ConstantClass(ClassType(java/lang/classfile/attribute/StackMapFrameInfo$SimpleVerificationTypeInfo)))), target=int typeSwitch(java.lang.classfile.attribute.StackMapFrameInfo$VerificationTypeInfo,int))[0m
[info][load-time transformation] sun.tools.jar.FingerPrint$ClassAttributes - unresolvable INVOKEDYNAMIC: INVOKEDYNAMIC(BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/classfile/attribute/InnerClassesAttribute)), ConstantClass(ClassType(java/lang/classfile/FieldModel)), ConstantClass(ClassType(java/lang/classfile/MethodModel)), ConstantClass(ClassType(java/lang/classfile/attribute/EnclosingMethodAttribute)))), target=int typeSwitch(java.lang.classfile.ClassElement,int))[0m
[info][project configuration] the JDK is part of the analysis[0m
[info][project setup] computing type hierarchy took 1.1325 s[0m
[info][project setup] computing overriding information took 1.0212 s[0m
[info][project setup] computing defined methods took 1.2927 s[0m
[info][project configuration] using Java 11+ call semantics (required JVM version is 68)[0m
[info][project configuration] project validation revealed 1 significant issues; validate the configured libraries for inconsistencies[0m
[info][project setup] validating the project took 0.2443 s[0m
[info][project setup] creating the project took 2.7220 s[0m
[info][project] project statistics:[0m
[info][project] 	- ProjectPackages: 31[0m
[info][project] 	- ProjectMethods: 51936[0m
[info][project] 	- ProjectInstructions: 505190[0m
[info][project] 	- ProjectFields: 6142[0m
[info][project] 	- ProjectClassFiles: 4353[0m
[info][project] 	- LibraryPackages: 881[0m
[info][project] 	- LibraryMethods: 278484[0m
[info][project] 	- LibraryFields: 111734[0m
[info][project] 	- LibraryClassFiles: 35017[0m
[info][analysis progress] setting up project took 8.3293 s [0m
[info][analysis configuration] the PropertyStore is initialized using: org.opalj.fpcf.PropertyStoreThreadsNumArg$$$Lambda/0x000073fc2b586fd0@6415f61e[0m
[info][project] initialization of PropertyStore took 0.0059 s[0m
[info][analysis progress] setting up property store took 0.0084 s [0m
[info][project] initialization of FPCFAnalysesManager took 0.0004 s[0m
[info][project] initialization of DeclaredMethods took 0.5681 s[0m
[info][project] initialization of SimpleContexts took 0.0011 s[0m
[info][analysis configuration] ContextProvider org.opalj.tac.fpcf.analyses.cg.AllocationSitesPointsToTypeIterator is selected[0m
[info][project] initialization of ContextProvider took 0.0001 s[0m
[info][project] initialization of TypeIterator took 0.0000 s[0m
[info][analysis configuration] the domain class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse will be used for performing abstract interpretations[0m
[info][project] initialization of AIDomainFactory took 0.0342 s[0m
[info][scheduler] scheduling strategy org.opalj.fpcf.scheduling.MaximumPhaseScheduling$@26ffd2c0 is selected[0m
[info][scheduler] scheduling Lazy/Transformer analyses in multiple phases[0m
[info][scheduler] computation of schedule took 0.6492 s[0m
[info][analysis progress] setting up analysis phase 0: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.AllocationSitePointsToSet, opalj.CallersProperty, opalj.Callees, opalj.MethodFieldWriteAccessInformation, opalj.ForNameClasses, opalj.FieldWriteAccessInformation, opalj.LoadedClasses, opalj.MethodFieldReadAccessInformation, opalj.TACAI, opalj.FieldReadAccessInformation}[0m
[info][analysis progress] 	computedInLaterPhase={opalj.FieldAssignability, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [opalj.ForNameClasses,opalj.MethodFieldReadAccessInformation,opalj.CallersProperty,opalj.MethodFieldWriteAccessInformation,opalj.AllocationSitePointsToSet,opalj.LoadedClasses,opalj.FieldWriteAccessInformation,opalj.Callees,opalj.FieldReadAccessInformation] ][0m
[info][analysis progress] )[0m
[info][OPAL Static Analyses Infrastructure] Production Build[0m
[info][project] initialization of DefinitionSites took 0.0003 s[0m
[info][project] initialization of VirtualFormalParameters took 0.3011 s[0m
[info][project] initialization of DeclaredFields took 0.0647 s[0m
[info][project] initialization of ClosedPackages took 0.0007 s[0m
[info][project] initialization of ClassExtensibility took 0.0007 s[0m
[info][project] initialization of TypeExtensibility took 0.0300 s[0m
[info][project] initialization of IsOverridableMethod took 0.0006 s[0m
[info][project] initialization of InitialEntryPoints took 0.0977 s[0m
[info][analysis configuration - field access reflection analysis] field access reflection analysis uses standard mode[0m
[info][analysis configuration] reflection analysis uses standard mode[0m
[info][OPAL Abstract Interpretation Framework] Production Build[0m
[34m[warn] the points-to sets might be incomplete (e.g. due to reflection or incomplete project information)[0m
[info][project] initialization of ProjectIndex took 0.1479 s[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=22,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Double)), ConstantClass(ClassType(java/lang/Float)), ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={3},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=10,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(java/lang/Long)), ConstantClass(ClassType(java/lang/Integer)), ConstantClass(ClassType(java/lang/Short)), ConstantClass(ClassType(java/lang/Byte)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicInteger)), ConstantClass(ClassType(java/util/concurrent/atomic/AtomicLong)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/math/BigDecimal)), ConstantClass(ClassType(java/math/BigInteger)), ConstantClass(ClassType(java/lang/Number)))),int typeSwitch(java.lang.Object,int),(UVar(defSites={-2},value=SObjectValue(type=java.lang.Object,isNull=Unknown,isPrecise=false)),UVar(defSites={0,31},value=AnIntegerValue)))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=49,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/nio/ch/FileChannelImpl)), ConstantClass(ClassType(sun/nio/ch/SocketChannelImpl)))),int typeSwitch(java.nio.channels.WritableByteChannel,int),(UVar(defSites={-4},value=SObjectValue(type=java.nio.channels.WritableByteChannel,isNull=Unknown,isPrecise=false)),UVar(defSites={12},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - points-to analysis] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
[34m[warn][analysis - call graph construction] unresolved invokedynamic: InvokedynamicFunctionCall(pc=126,BootstrapMethod(InvokeStaticMethodHandle(ClassType(java/lang/runtime/SwitchBootstraps),false,typeSwitch,MethodDescriptor((java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, java.lang.Object[]): java.lang.invoke.CallSite)),ArraySeq(ConstantClass(ClassType(sun/security/util/MemoryCache$QueueCacheEntry)))),int typeSwitch(sun.security.util.MemoryCache$CacheEntry,int),(UVar(defSites={26},value=SObjectValue(type=sun.security.util.MemoryCache$CacheEntry,isNull=Unknown,isPrecise=false)),UVar(defSites={28},value=TheIntegerValue(0))))[0m
cleared 336 bits
[info][analysis progress] analysis phase 0 took 261.3489 s[0m
[info][analysis progress] setting up analysis phase 1: PhaseConfiguration([0m
[info][analysis progress] 	computedInThisPhase={opalj.FieldAssignability, opalj.TACAI, org.opalj.TypeImmutability, opalj.FieldImmutability, opalj.ClassImmutability, opalj.EscapeProperty}[0m
[info][analysis progress] 	computedInLaterPhase={}[0m
[info][analysis progress] 	suppressInterimUpdates={}[0m
[info][analysis progress] 	finalizationOrder=[ [] ][0m
[info][analysis progress] )[0m
cleared 64 bits
[info][analysis progress] analysis phase 1 took 4.1025 s[0m


 
 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   274.4677 s seconds total time
   8.3293 s seconds project time
   0.0084 s seconds property store time
   266.1384 s seconds analysis time


 time results:

 1 Threads :: took 266.1384 s seconds analysis time

 results folder: None

 CofigurationName: _E_All

 AI domain: class org.opalj.ai.domain.l2.DefaultPerformInvocationsDomainWithCFGAndDefUse

 propertyStore: class org.opalj.fpcf.par.PKECPropertyStore



 Assignable Fields: 640
 Unsafely Lazily Initialized  Fields: 0
 lazily Initialized Fields: 0
 Effectively Non Assignable Fields: 4
 Non Assignable Fields: 5498
 Fields: 6142

 Mutable Fields: 640
 Non Transitively Immutable Fields: 394
 Dependently Immutable Fields: 776
 Transitively Immutable Fields: 4332
 Fields: 6142
 Fields with primitive Types / java.lang.String: 1722

 Mutable Classes: 477
 Non Transitively Immutable Classes: 258
 Dependently Immutable Classes: 334
 Transitively Immutable Classes: 2768
 Classes: 3837

 Transitively Immutable Interfaces: 516


 Mutable Types: 629
 Non Transitively Immutable Types: 275
 Dependently Immutable Types: 406
 Transitively immutable Types: 3043
 Types: 4353

 running All analysis
 took:
   274.4677 s seconds total time
   8.3293 s seconds project time
   0.0084 s seconds property store time
   266.1384 s seconds analysis time

evaluation time: 274.6799 s
Fri Oct 10 05:02:47 UTC 2025
